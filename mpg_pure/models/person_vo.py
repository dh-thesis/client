# coding: utf-8

"""
    PubMan REST API

    This is an automatically generated REST API client for PubMan.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PersonVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alternative_names': 'list[str]',
        'complete_name': 'str',
        'family_name': 'str',
        'given_name': 'str',
        'identifier': 'IdentifierVO',
        'organizations': 'list[OrganizationVO]',
        'pseudonyms': 'list[str]',
        'titles': 'list[str]'
    }

    attribute_map = {
        'alternative_names': 'alternativeNames',
        'complete_name': 'completeName',
        'family_name': 'familyName',
        'given_name': 'givenName',
        'identifier': 'identifier',
        'organizations': 'organizations',
        'pseudonyms': 'pseudonyms',
        'titles': 'titles'
    }

    def __init__(self, alternative_names=None, complete_name=None, family_name=None, given_name=None, identifier=None, organizations=None, pseudonyms=None, titles=None):  # noqa: E501
        """PersonVO - a model defined in Swagger"""  # noqa: E501

        self._alternative_names = None
        self._complete_name = None
        self._family_name = None
        self._given_name = None
        self._identifier = None
        self._organizations = None
        self._pseudonyms = None
        self._titles = None
        self.discriminator = None

        if alternative_names is not None:
            self.alternative_names = alternative_names
        if complete_name is not None:
            self.complete_name = complete_name
        if family_name is not None:
            self.family_name = family_name
        if given_name is not None:
            self.given_name = given_name
        if identifier is not None:
            self.identifier = identifier
        if organizations is not None:
            self.organizations = organizations
        if pseudonyms is not None:
            self.pseudonyms = pseudonyms
        if titles is not None:
            self.titles = titles

    @property
    def alternative_names(self):
        """Gets the alternative_names of this PersonVO.  # noqa: E501


        :return: The alternative_names of this PersonVO.  # noqa: E501
        :rtype: list[str]
        """
        return self._alternative_names

    @alternative_names.setter
    def alternative_names(self, alternative_names):
        """Sets the alternative_names of this PersonVO.


        :param alternative_names: The alternative_names of this PersonVO.  # noqa: E501
        :type: list[str]
        """

        self._alternative_names = alternative_names

    @property
    def complete_name(self):
        """Gets the complete_name of this PersonVO.  # noqa: E501


        :return: The complete_name of this PersonVO.  # noqa: E501
        :rtype: str
        """
        return self._complete_name

    @complete_name.setter
    def complete_name(self, complete_name):
        """Sets the complete_name of this PersonVO.


        :param complete_name: The complete_name of this PersonVO.  # noqa: E501
        :type: str
        """

        self._complete_name = complete_name

    @property
    def family_name(self):
        """Gets the family_name of this PersonVO.  # noqa: E501


        :return: The family_name of this PersonVO.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this PersonVO.


        :param family_name: The family_name of this PersonVO.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def given_name(self):
        """Gets the given_name of this PersonVO.  # noqa: E501


        :return: The given_name of this PersonVO.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this PersonVO.


        :param given_name: The given_name of this PersonVO.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def identifier(self):
        """Gets the identifier of this PersonVO.  # noqa: E501


        :return: The identifier of this PersonVO.  # noqa: E501
        :rtype: IdentifierVO
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PersonVO.


        :param identifier: The identifier of this PersonVO.  # noqa: E501
        :type: IdentifierVO
        """

        self._identifier = identifier

    @property
    def organizations(self):
        """Gets the organizations of this PersonVO.  # noqa: E501


        :return: The organizations of this PersonVO.  # noqa: E501
        :rtype: list[OrganizationVO]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this PersonVO.


        :param organizations: The organizations of this PersonVO.  # noqa: E501
        :type: list[OrganizationVO]
        """

        self._organizations = organizations

    @property
    def pseudonyms(self):
        """Gets the pseudonyms of this PersonVO.  # noqa: E501


        :return: The pseudonyms of this PersonVO.  # noqa: E501
        :rtype: list[str]
        """
        return self._pseudonyms

    @pseudonyms.setter
    def pseudonyms(self, pseudonyms):
        """Sets the pseudonyms of this PersonVO.


        :param pseudonyms: The pseudonyms of this PersonVO.  # noqa: E501
        :type: list[str]
        """

        self._pseudonyms = pseudonyms

    @property
    def titles(self):
        """Gets the titles of this PersonVO.  # noqa: E501


        :return: The titles of this PersonVO.  # noqa: E501
        :rtype: list[str]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """Sets the titles of this PersonVO.


        :param titles: The titles of this PersonVO.  # noqa: E501
        :type: list[str]
        """

        self._titles = titles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
