# coding: utf-8

"""
    PubMan REST API

    This is an automatically generated REST API client for PubMan.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreatorVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization': 'OrganizationVO',
        'person': 'PersonVO',
        'role': 'str',
        'type': 'str'
    }

    attribute_map = {
        'organization': 'organization',
        'person': 'person',
        'role': 'role',
        'type': 'type'
    }

    def __init__(self, organization=None, person=None, role=None, type=None):  # noqa: E501
        """CreatorVO - a model defined in Swagger"""  # noqa: E501

        self._organization = None
        self._person = None
        self._role = None
        self._type = None
        self.discriminator = None

        if organization is not None:
            self.organization = organization
        if person is not None:
            self.person = person
        if role is not None:
            self.role = role
        if type is not None:
            self.type = type

    @property
    def organization(self):
        """Gets the organization of this CreatorVO.  # noqa: E501


        :return: The organization of this CreatorVO.  # noqa: E501
        :rtype: OrganizationVO
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this CreatorVO.


        :param organization: The organization of this CreatorVO.  # noqa: E501
        :type: OrganizationVO
        """

        self._organization = organization

    @property
    def person(self):
        """Gets the person of this CreatorVO.  # noqa: E501


        :return: The person of this CreatorVO.  # noqa: E501
        :rtype: PersonVO
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this CreatorVO.


        :param person: The person of this CreatorVO.  # noqa: E501
        :type: PersonVO
        """

        self._person = person

    @property
    def role(self):
        """Gets the role of this CreatorVO.  # noqa: E501


        :return: The role of this CreatorVO.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CreatorVO.


        :param role: The role of this CreatorVO.  # noqa: E501
        :type: str
        """
        allowed_values = ["ARTIST", "AUTHOR", "EDITOR", "PAINTER", "ILLUSTRATOR", "PHOTOGRAPHER", "COMMENTATOR", "TRANSCRIBER", "ADVISOR", "TRANSLATOR", "CONTRIBUTOR", "HONOREE", "REFEREE", "INVENTOR", "APPLICANT", "DIRECTOR", "PRODUCER", "ACTOR", "CINEMATOGRAPHER", "SOUND_DESIGNER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def type(self):
        """Gets the type of this CreatorVO.  # noqa: E501


        :return: The type of this CreatorVO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreatorVO.


        :param type: The type of this CreatorVO.  # noqa: E501
        :type: str
        """
        allowed_values = ["PERSON", "ORGANIZATION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatorVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatorVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
