# coding: utf-8

"""
    PubMan REST API

    This is an automatically generated REST API client for PubMan.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MdsOrganizationalUnitDetailsVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alternative_names': 'list[str]',
        'city': 'str',
        'coordinates': 'Coordinates',
        'country_code': 'str',
        'descriptions': 'list[str]',
        'end_date': 'str',
        'identifiers': 'list[IdentifierVO]',
        'name': 'str',
        'start_date': 'str',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'alternative_names': 'alternativeNames',
        'city': 'city',
        'coordinates': 'coordinates',
        'country_code': 'countryCode',
        'descriptions': 'descriptions',
        'end_date': 'endDate',
        'identifiers': 'identifiers',
        'name': 'name',
        'start_date': 'startDate',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, alternative_names=None, city=None, coordinates=None, country_code=None, descriptions=None, end_date=None, identifiers=None, name=None, start_date=None, title=None, type=None):  # noqa: E501
        """MdsOrganizationalUnitDetailsVO - a model defined in Swagger"""  # noqa: E501

        self._alternative_names = None
        self._city = None
        self._coordinates = None
        self._country_code = None
        self._descriptions = None
        self._end_date = None
        self._identifiers = None
        self._name = None
        self._start_date = None
        self._title = None
        self._type = None
        self.discriminator = None

        if alternative_names is not None:
            self.alternative_names = alternative_names
        if city is not None:
            self.city = city
        if coordinates is not None:
            self.coordinates = coordinates
        if country_code is not None:
            self.country_code = country_code
        if descriptions is not None:
            self.descriptions = descriptions
        if end_date is not None:
            self.end_date = end_date
        if identifiers is not None:
            self.identifiers = identifiers
        if name is not None:
            self.name = name
        if start_date is not None:
            self.start_date = start_date
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type

    @property
    def alternative_names(self):
        """Gets the alternative_names of this MdsOrganizationalUnitDetailsVO.  # noqa: E501


        :return: The alternative_names of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :rtype: list[str]
        """
        return self._alternative_names

    @alternative_names.setter
    def alternative_names(self, alternative_names):
        """Sets the alternative_names of this MdsOrganizationalUnitDetailsVO.


        :param alternative_names: The alternative_names of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :type: list[str]
        """

        self._alternative_names = alternative_names

    @property
    def city(self):
        """Gets the city of this MdsOrganizationalUnitDetailsVO.  # noqa: E501


        :return: The city of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this MdsOrganizationalUnitDetailsVO.


        :param city: The city of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def coordinates(self):
        """Gets the coordinates of this MdsOrganizationalUnitDetailsVO.  # noqa: E501


        :return: The coordinates of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :rtype: Coordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this MdsOrganizationalUnitDetailsVO.


        :param coordinates: The coordinates of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :type: Coordinates
        """

        self._coordinates = coordinates

    @property
    def country_code(self):
        """Gets the country_code of this MdsOrganizationalUnitDetailsVO.  # noqa: E501


        :return: The country_code of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this MdsOrganizationalUnitDetailsVO.


        :param country_code: The country_code of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def descriptions(self):
        """Gets the descriptions of this MdsOrganizationalUnitDetailsVO.  # noqa: E501


        :return: The descriptions of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :rtype: list[str]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this MdsOrganizationalUnitDetailsVO.


        :param descriptions: The descriptions of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :type: list[str]
        """

        self._descriptions = descriptions

    @property
    def end_date(self):
        """Gets the end_date of this MdsOrganizationalUnitDetailsVO.  # noqa: E501


        :return: The end_date of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this MdsOrganizationalUnitDetailsVO.


        :param end_date: The end_date of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def identifiers(self):
        """Gets the identifiers of this MdsOrganizationalUnitDetailsVO.  # noqa: E501


        :return: The identifiers of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :rtype: list[IdentifierVO]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this MdsOrganizationalUnitDetailsVO.


        :param identifiers: The identifiers of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :type: list[IdentifierVO]
        """

        self._identifiers = identifiers

    @property
    def name(self):
        """Gets the name of this MdsOrganizationalUnitDetailsVO.  # noqa: E501


        :return: The name of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MdsOrganizationalUnitDetailsVO.


        :param name: The name of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this MdsOrganizationalUnitDetailsVO.  # noqa: E501


        :return: The start_date of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this MdsOrganizationalUnitDetailsVO.


        :param start_date: The start_date of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def title(self):
        """Gets the title of this MdsOrganizationalUnitDetailsVO.  # noqa: E501


        :return: The title of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MdsOrganizationalUnitDetailsVO.


        :param title: The title of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this MdsOrganizationalUnitDetailsVO.  # noqa: E501


        :return: The type of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MdsOrganizationalUnitDetailsVO.


        :param type: The type of this MdsOrganizationalUnitDetailsVO.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MdsOrganizationalUnitDetailsVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MdsOrganizationalUnitDetailsVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
