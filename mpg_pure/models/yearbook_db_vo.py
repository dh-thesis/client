# coding: utf-8

"""
    PubMan REST API

    This is an automatically generated REST API client for PubMan.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class YearbookDbVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context_ids': 'list[str]',
        'creation_date': 'datetime',
        'creator': 'AccountUserDbRO',
        'item_ids': 'list[str]',
        'last_modification_date': 'datetime',
        'modifier': 'AccountUserDbRO',
        'name': 'str',
        'object_id': 'str',
        'organization': 'AffiliationDbVO',
        'state': 'str',
        'year': 'int'
    }

    attribute_map = {
        'context_ids': 'contextIds',
        'creation_date': 'creationDate',
        'creator': 'creator',
        'item_ids': 'itemIds',
        'last_modification_date': 'lastModificationDate',
        'modifier': 'modifier',
        'name': 'name',
        'object_id': 'objectId',
        'organization': 'organization',
        'state': 'state',
        'year': 'year'
    }

    def __init__(self, context_ids=None, creation_date=None, creator=None, item_ids=None, last_modification_date=None, modifier=None, name=None, object_id=None, organization=None, state=None, year=None):  # noqa: E501
        """YearbookDbVO - a model defined in Swagger"""  # noqa: E501

        self._context_ids = None
        self._creation_date = None
        self._creator = None
        self._item_ids = None
        self._last_modification_date = None
        self._modifier = None
        self._name = None
        self._object_id = None
        self._organization = None
        self._state = None
        self._year = None
        self.discriminator = None

        if context_ids is not None:
            self.context_ids = context_ids
        if creation_date is not None:
            self.creation_date = creation_date
        if creator is not None:
            self.creator = creator
        if item_ids is not None:
            self.item_ids = item_ids
        if last_modification_date is not None:
            self.last_modification_date = last_modification_date
        if modifier is not None:
            self.modifier = modifier
        if name is not None:
            self.name = name
        if object_id is not None:
            self.object_id = object_id
        if organization is not None:
            self.organization = organization
        if state is not None:
            self.state = state
        if year is not None:
            self.year = year

    @property
    def context_ids(self):
        """Gets the context_ids of this YearbookDbVO.  # noqa: E501


        :return: The context_ids of this YearbookDbVO.  # noqa: E501
        :rtype: list[str]
        """
        return self._context_ids

    @context_ids.setter
    def context_ids(self, context_ids):
        """Sets the context_ids of this YearbookDbVO.


        :param context_ids: The context_ids of this YearbookDbVO.  # noqa: E501
        :type: list[str]
        """

        self._context_ids = context_ids

    @property
    def creation_date(self):
        """Gets the creation_date of this YearbookDbVO.  # noqa: E501


        :return: The creation_date of this YearbookDbVO.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this YearbookDbVO.


        :param creation_date: The creation_date of this YearbookDbVO.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def creator(self):
        """Gets the creator of this YearbookDbVO.  # noqa: E501


        :return: The creator of this YearbookDbVO.  # noqa: E501
        :rtype: AccountUserDbRO
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this YearbookDbVO.


        :param creator: The creator of this YearbookDbVO.  # noqa: E501
        :type: AccountUserDbRO
        """

        self._creator = creator

    @property
    def item_ids(self):
        """Gets the item_ids of this YearbookDbVO.  # noqa: E501


        :return: The item_ids of this YearbookDbVO.  # noqa: E501
        :rtype: list[str]
        """
        return self._item_ids

    @item_ids.setter
    def item_ids(self, item_ids):
        """Sets the item_ids of this YearbookDbVO.


        :param item_ids: The item_ids of this YearbookDbVO.  # noqa: E501
        :type: list[str]
        """

        self._item_ids = item_ids

    @property
    def last_modification_date(self):
        """Gets the last_modification_date of this YearbookDbVO.  # noqa: E501


        :return: The last_modification_date of this YearbookDbVO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modification_date

    @last_modification_date.setter
    def last_modification_date(self, last_modification_date):
        """Sets the last_modification_date of this YearbookDbVO.


        :param last_modification_date: The last_modification_date of this YearbookDbVO.  # noqa: E501
        :type: datetime
        """

        self._last_modification_date = last_modification_date

    @property
    def modifier(self):
        """Gets the modifier of this YearbookDbVO.  # noqa: E501


        :return: The modifier of this YearbookDbVO.  # noqa: E501
        :rtype: AccountUserDbRO
        """
        return self._modifier

    @modifier.setter
    def modifier(self, modifier):
        """Sets the modifier of this YearbookDbVO.


        :param modifier: The modifier of this YearbookDbVO.  # noqa: E501
        :type: AccountUserDbRO
        """

        self._modifier = modifier

    @property
    def name(self):
        """Gets the name of this YearbookDbVO.  # noqa: E501


        :return: The name of this YearbookDbVO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this YearbookDbVO.


        :param name: The name of this YearbookDbVO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def object_id(self):
        """Gets the object_id of this YearbookDbVO.  # noqa: E501


        :return: The object_id of this YearbookDbVO.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this YearbookDbVO.


        :param object_id: The object_id of this YearbookDbVO.  # noqa: E501
        :type: str
        """

        self._object_id = object_id

    @property
    def organization(self):
        """Gets the organization of this YearbookDbVO.  # noqa: E501


        :return: The organization of this YearbookDbVO.  # noqa: E501
        :rtype: AffiliationDbVO
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this YearbookDbVO.


        :param organization: The organization of this YearbookDbVO.  # noqa: E501
        :type: AffiliationDbVO
        """

        self._organization = organization

    @property
    def state(self):
        """Gets the state of this YearbookDbVO.  # noqa: E501


        :return: The state of this YearbookDbVO.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this YearbookDbVO.


        :param state: The state of this YearbookDbVO.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREATED", "SUBMITTED", "RELEASED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def year(self):
        """Gets the year of this YearbookDbVO.  # noqa: E501


        :return: The year of this YearbookDbVO.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this YearbookDbVO.


        :param year: The year of this YearbookDbVO.  # noqa: E501
        :type: int
        """

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(YearbookDbVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, YearbookDbVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
