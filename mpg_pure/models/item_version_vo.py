# coding: utf-8

"""
    PubMan REST API

    This is an automatically generated REST API client for PubMan.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ItemVersionVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'ContextDbRO',
        'creation_date': 'datetime',
        'creator': 'AccountUserDbRO',
        'files': 'list[FileDbVO]',
        'last_modification_date': 'datetime',
        'latest_release': 'ItemVersionRO',
        'latest_version': 'ItemVersionRO',
        'local_tags': 'list[str]',
        'message': 'str',
        'metadata': 'MdsPublicationVO',
        'modification_date': 'datetime',
        'modifier': 'AccountUserDbRO',
        'object_id': 'str',
        'object_pid': 'str',
        'public_state': 'str',
        'version_number': 'int',
        'version_pid': 'str',
        'version_state': 'str'
    }

    attribute_map = {
        'context': 'context',
        'creation_date': 'creationDate',
        'creator': 'creator',
        'files': 'files',
        'last_modification_date': 'lastModificationDate',
        'latest_release': 'latestRelease',
        'latest_version': 'latestVersion',
        'local_tags': 'localTags',
        'message': 'message',
        'metadata': 'metadata',
        'modification_date': 'modificationDate',
        'modifier': 'modifier',
        'object_id': 'objectId',
        'object_pid': 'objectPid',
        'public_state': 'publicState',
        'version_number': 'versionNumber',
        'version_pid': 'versionPid',
        'version_state': 'versionState'
    }

    def __init__(self, context=None, creation_date=None, creator=None, files=None, last_modification_date=None, latest_release=None, latest_version=None, local_tags=None, message=None, metadata=None, modification_date=None, modifier=None, object_id=None, object_pid=None, public_state=None, version_number=None, version_pid=None, version_state=None):  # noqa: E501
        """ItemVersionVO - a model defined in Swagger"""  # noqa: E501

        self._context = None
        self._creation_date = None
        self._creator = None
        self._files = None
        self._last_modification_date = None
        self._latest_release = None
        self._latest_version = None
        self._local_tags = None
        self._message = None
        self._metadata = None
        self._modification_date = None
        self._modifier = None
        self._object_id = None
        self._object_pid = None
        self._public_state = None
        self._version_number = None
        self._version_pid = None
        self._version_state = None
        self.discriminator = None

        if context is not None:
            self.context = context
        if creation_date is not None:
            self.creation_date = creation_date
        if creator is not None:
            self.creator = creator
        if files is not None:
            self.files = files
        if last_modification_date is not None:
            self.last_modification_date = last_modification_date
        if latest_release is not None:
            self.latest_release = latest_release
        if latest_version is not None:
            self.latest_version = latest_version
        if local_tags is not None:
            self.local_tags = local_tags
        if message is not None:
            self.message = message
        if metadata is not None:
            self.metadata = metadata
        if modification_date is not None:
            self.modification_date = modification_date
        if modifier is not None:
            self.modifier = modifier
        if object_id is not None:
            self.object_id = object_id
        if object_pid is not None:
            self.object_pid = object_pid
        if public_state is not None:
            self.public_state = public_state
        if version_number is not None:
            self.version_number = version_number
        if version_pid is not None:
            self.version_pid = version_pid
        if version_state is not None:
            self.version_state = version_state

    @property
    def context(self):
        """Gets the context of this ItemVersionVO.  # noqa: E501


        :return: The context of this ItemVersionVO.  # noqa: E501
        :rtype: ContextDbRO
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ItemVersionVO.


        :param context: The context of this ItemVersionVO.  # noqa: E501
        :type: ContextDbRO
        """

        self._context = context

    @property
    def creation_date(self):
        """Gets the creation_date of this ItemVersionVO.  # noqa: E501


        :return: The creation_date of this ItemVersionVO.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ItemVersionVO.


        :param creation_date: The creation_date of this ItemVersionVO.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def creator(self):
        """Gets the creator of this ItemVersionVO.  # noqa: E501


        :return: The creator of this ItemVersionVO.  # noqa: E501
        :rtype: AccountUserDbRO
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this ItemVersionVO.


        :param creator: The creator of this ItemVersionVO.  # noqa: E501
        :type: AccountUserDbRO
        """

        self._creator = creator

    @property
    def files(self):
        """Gets the files of this ItemVersionVO.  # noqa: E501


        :return: The files of this ItemVersionVO.  # noqa: E501
        :rtype: list[FileDbVO]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ItemVersionVO.


        :param files: The files of this ItemVersionVO.  # noqa: E501
        :type: list[FileDbVO]
        """

        self._files = files

    @property
    def last_modification_date(self):
        """Gets the last_modification_date of this ItemVersionVO.  # noqa: E501


        :return: The last_modification_date of this ItemVersionVO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modification_date

    @last_modification_date.setter
    def last_modification_date(self, last_modification_date):
        """Sets the last_modification_date of this ItemVersionVO.


        :param last_modification_date: The last_modification_date of this ItemVersionVO.  # noqa: E501
        :type: datetime
        """

        self._last_modification_date = last_modification_date

    @property
    def latest_release(self):
        """Gets the latest_release of this ItemVersionVO.  # noqa: E501


        :return: The latest_release of this ItemVersionVO.  # noqa: E501
        :rtype: ItemVersionRO
        """
        return self._latest_release

    @latest_release.setter
    def latest_release(self, latest_release):
        """Sets the latest_release of this ItemVersionVO.


        :param latest_release: The latest_release of this ItemVersionVO.  # noqa: E501
        :type: ItemVersionRO
        """

        self._latest_release = latest_release

    @property
    def latest_version(self):
        """Gets the latest_version of this ItemVersionVO.  # noqa: E501


        :return: The latest_version of this ItemVersionVO.  # noqa: E501
        :rtype: ItemVersionRO
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this ItemVersionVO.


        :param latest_version: The latest_version of this ItemVersionVO.  # noqa: E501
        :type: ItemVersionRO
        """

        self._latest_version = latest_version

    @property
    def local_tags(self):
        """Gets the local_tags of this ItemVersionVO.  # noqa: E501


        :return: The local_tags of this ItemVersionVO.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_tags

    @local_tags.setter
    def local_tags(self, local_tags):
        """Sets the local_tags of this ItemVersionVO.


        :param local_tags: The local_tags of this ItemVersionVO.  # noqa: E501
        :type: list[str]
        """

        self._local_tags = local_tags

    @property
    def message(self):
        """Gets the message of this ItemVersionVO.  # noqa: E501


        :return: The message of this ItemVersionVO.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ItemVersionVO.


        :param message: The message of this ItemVersionVO.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def metadata(self):
        """Gets the metadata of this ItemVersionVO.  # noqa: E501


        :return: The metadata of this ItemVersionVO.  # noqa: E501
        :rtype: MdsPublicationVO
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ItemVersionVO.


        :param metadata: The metadata of this ItemVersionVO.  # noqa: E501
        :type: MdsPublicationVO
        """

        self._metadata = metadata

    @property
    def modification_date(self):
        """Gets the modification_date of this ItemVersionVO.  # noqa: E501


        :return: The modification_date of this ItemVersionVO.  # noqa: E501
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this ItemVersionVO.


        :param modification_date: The modification_date of this ItemVersionVO.  # noqa: E501
        :type: datetime
        """

        self._modification_date = modification_date

    @property
    def modifier(self):
        """Gets the modifier of this ItemVersionVO.  # noqa: E501


        :return: The modifier of this ItemVersionVO.  # noqa: E501
        :rtype: AccountUserDbRO
        """
        return self._modifier

    @modifier.setter
    def modifier(self, modifier):
        """Sets the modifier of this ItemVersionVO.


        :param modifier: The modifier of this ItemVersionVO.  # noqa: E501
        :type: AccountUserDbRO
        """

        self._modifier = modifier

    @property
    def object_id(self):
        """Gets the object_id of this ItemVersionVO.  # noqa: E501


        :return: The object_id of this ItemVersionVO.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ItemVersionVO.


        :param object_id: The object_id of this ItemVersionVO.  # noqa: E501
        :type: str
        """

        self._object_id = object_id

    @property
    def object_pid(self):
        """Gets the object_pid of this ItemVersionVO.  # noqa: E501


        :return: The object_pid of this ItemVersionVO.  # noqa: E501
        :rtype: str
        """
        return self._object_pid

    @object_pid.setter
    def object_pid(self, object_pid):
        """Sets the object_pid of this ItemVersionVO.


        :param object_pid: The object_pid of this ItemVersionVO.  # noqa: E501
        :type: str
        """

        self._object_pid = object_pid

    @property
    def public_state(self):
        """Gets the public_state of this ItemVersionVO.  # noqa: E501


        :return: The public_state of this ItemVersionVO.  # noqa: E501
        :rtype: str
        """
        return self._public_state

    @public_state.setter
    def public_state(self, public_state):
        """Sets the public_state of this ItemVersionVO.


        :param public_state: The public_state of this ItemVersionVO.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "SUBMITTED", "RELEASED", "WITHDRAWN", "IN_REVISION"]  # noqa: E501
        if public_state not in allowed_values:
            raise ValueError(
                "Invalid value for `public_state` ({0}), must be one of {1}"  # noqa: E501
                .format(public_state, allowed_values)
            )

        self._public_state = public_state

    @property
    def version_number(self):
        """Gets the version_number of this ItemVersionVO.  # noqa: E501


        :return: The version_number of this ItemVersionVO.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this ItemVersionVO.


        :param version_number: The version_number of this ItemVersionVO.  # noqa: E501
        :type: int
        """

        self._version_number = version_number

    @property
    def version_pid(self):
        """Gets the version_pid of this ItemVersionVO.  # noqa: E501


        :return: The version_pid of this ItemVersionVO.  # noqa: E501
        :rtype: str
        """
        return self._version_pid

    @version_pid.setter
    def version_pid(self, version_pid):
        """Sets the version_pid of this ItemVersionVO.


        :param version_pid: The version_pid of this ItemVersionVO.  # noqa: E501
        :type: str
        """

        self._version_pid = version_pid

    @property
    def version_state(self):
        """Gets the version_state of this ItemVersionVO.  # noqa: E501


        :return: The version_state of this ItemVersionVO.  # noqa: E501
        :rtype: str
        """
        return self._version_state

    @version_state.setter
    def version_state(self, version_state):
        """Sets the version_state of this ItemVersionVO.


        :param version_state: The version_state of this ItemVersionVO.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "SUBMITTED", "RELEASED", "WITHDRAWN", "IN_REVISION"]  # noqa: E501
        if version_state not in allowed_values:
            raise ValueError(
                "Invalid value for `version_state` ({0}), must be one of {1}"  # noqa: E501
                .format(version_state, allowed_values)
            )

        self._version_state = version_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemVersionVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemVersionVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
