# coding: utf-8

"""
    PubMan REST API

    This is an automatically generated REST API client for PubMan.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProjectInfoVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'funding_info': 'FundingInfoVO',
        'grant_identifier': 'IdentifierVO',
        'title': 'str'
    }

    attribute_map = {
        'funding_info': 'fundingInfo',
        'grant_identifier': 'grantIdentifier',
        'title': 'title'
    }

    def __init__(self, funding_info=None, grant_identifier=None, title=None):  # noqa: E501
        """ProjectInfoVO - a model defined in Swagger"""  # noqa: E501

        self._funding_info = None
        self._grant_identifier = None
        self._title = None
        self.discriminator = None

        if funding_info is not None:
            self.funding_info = funding_info
        if grant_identifier is not None:
            self.grant_identifier = grant_identifier
        if title is not None:
            self.title = title

    @property
    def funding_info(self):
        """Gets the funding_info of this ProjectInfoVO.  # noqa: E501


        :return: The funding_info of this ProjectInfoVO.  # noqa: E501
        :rtype: FundingInfoVO
        """
        return self._funding_info

    @funding_info.setter
    def funding_info(self, funding_info):
        """Sets the funding_info of this ProjectInfoVO.


        :param funding_info: The funding_info of this ProjectInfoVO.  # noqa: E501
        :type: FundingInfoVO
        """

        self._funding_info = funding_info

    @property
    def grant_identifier(self):
        """Gets the grant_identifier of this ProjectInfoVO.  # noqa: E501


        :return: The grant_identifier of this ProjectInfoVO.  # noqa: E501
        :rtype: IdentifierVO
        """
        return self._grant_identifier

    @grant_identifier.setter
    def grant_identifier(self, grant_identifier):
        """Sets the grant_identifier of this ProjectInfoVO.


        :param grant_identifier: The grant_identifier of this ProjectInfoVO.  # noqa: E501
        :type: IdentifierVO
        """

        self._grant_identifier = grant_identifier

    @property
    def title(self):
        """Gets the title of this ProjectInfoVO.  # noqa: E501


        :return: The title of this ProjectInfoVO.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProjectInfoVO.


        :param title: The title of this ProjectInfoVO.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectInfoVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectInfoVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
