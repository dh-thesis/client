# coding: utf-8

"""
    PubMan REST API

    This is an automatically generated REST API client for PubMan.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MdsFileVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_category': 'str',
        'copyright_date': 'str',
        'description': 'str',
        'embargo_until': 'str',
        'formats': 'list[FormatVO]',
        'identifiers': 'list[IdentifierVO]',
        'license': 'str',
        'rights': 'str',
        'size': 'int',
        'title': 'str'
    }

    attribute_map = {
        'content_category': 'contentCategory',
        'copyright_date': 'copyrightDate',
        'description': 'description',
        'embargo_until': 'embargoUntil',
        'formats': 'formats',
        'identifiers': 'identifiers',
        'license': 'license',
        'rights': 'rights',
        'size': 'size',
        'title': 'title'
    }

    def __init__(self, content_category=None, copyright_date=None, description=None, embargo_until=None, formats=None, identifiers=None, license=None, rights=None, size=None, title=None):  # noqa: E501
        """MdsFileVO - a model defined in Swagger"""  # noqa: E501

        self._content_category = None
        self._copyright_date = None
        self._description = None
        self._embargo_until = None
        self._formats = None
        self._identifiers = None
        self._license = None
        self._rights = None
        self._size = None
        self._title = None
        self.discriminator = None

        if content_category is not None:
            self.content_category = content_category
        if copyright_date is not None:
            self.copyright_date = copyright_date
        if description is not None:
            self.description = description
        if embargo_until is not None:
            self.embargo_until = embargo_until
        if formats is not None:
            self.formats = formats
        if identifiers is not None:
            self.identifiers = identifiers
        if license is not None:
            self.license = license
        if rights is not None:
            self.rights = rights
        if size is not None:
            self.size = size
        if title is not None:
            self.title = title

    @property
    def content_category(self):
        """Gets the content_category of this MdsFileVO.  # noqa: E501


        :return: The content_category of this MdsFileVO.  # noqa: E501
        :rtype: str
        """
        return self._content_category

    @content_category.setter
    def content_category(self, content_category):
        """Sets the content_category of this MdsFileVO.


        :param content_category: The content_category of this MdsFileVO.  # noqa: E501
        :type: str
        """

        self._content_category = content_category

    @property
    def copyright_date(self):
        """Gets the copyright_date of this MdsFileVO.  # noqa: E501


        :return: The copyright_date of this MdsFileVO.  # noqa: E501
        :rtype: str
        """
        return self._copyright_date

    @copyright_date.setter
    def copyright_date(self, copyright_date):
        """Sets the copyright_date of this MdsFileVO.


        :param copyright_date: The copyright_date of this MdsFileVO.  # noqa: E501
        :type: str
        """

        self._copyright_date = copyright_date

    @property
    def description(self):
        """Gets the description of this MdsFileVO.  # noqa: E501


        :return: The description of this MdsFileVO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MdsFileVO.


        :param description: The description of this MdsFileVO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def embargo_until(self):
        """Gets the embargo_until of this MdsFileVO.  # noqa: E501


        :return: The embargo_until of this MdsFileVO.  # noqa: E501
        :rtype: str
        """
        return self._embargo_until

    @embargo_until.setter
    def embargo_until(self, embargo_until):
        """Sets the embargo_until of this MdsFileVO.


        :param embargo_until: The embargo_until of this MdsFileVO.  # noqa: E501
        :type: str
        """

        self._embargo_until = embargo_until

    @property
    def formats(self):
        """Gets the formats of this MdsFileVO.  # noqa: E501


        :return: The formats of this MdsFileVO.  # noqa: E501
        :rtype: list[FormatVO]
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this MdsFileVO.


        :param formats: The formats of this MdsFileVO.  # noqa: E501
        :type: list[FormatVO]
        """

        self._formats = formats

    @property
    def identifiers(self):
        """Gets the identifiers of this MdsFileVO.  # noqa: E501


        :return: The identifiers of this MdsFileVO.  # noqa: E501
        :rtype: list[IdentifierVO]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this MdsFileVO.


        :param identifiers: The identifiers of this MdsFileVO.  # noqa: E501
        :type: list[IdentifierVO]
        """

        self._identifiers = identifiers

    @property
    def license(self):
        """Gets the license of this MdsFileVO.  # noqa: E501


        :return: The license of this MdsFileVO.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this MdsFileVO.


        :param license: The license of this MdsFileVO.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def rights(self):
        """Gets the rights of this MdsFileVO.  # noqa: E501


        :return: The rights of this MdsFileVO.  # noqa: E501
        :rtype: str
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this MdsFileVO.


        :param rights: The rights of this MdsFileVO.  # noqa: E501
        :type: str
        """

        self._rights = rights

    @property
    def size(self):
        """Gets the size of this MdsFileVO.  # noqa: E501


        :return: The size of this MdsFileVO.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this MdsFileVO.


        :param size: The size of this MdsFileVO.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def title(self):
        """Gets the title of this MdsFileVO.  # noqa: E501


        :return: The title of this MdsFileVO.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MdsFileVO.


        :param title: The title of this MdsFileVO.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MdsFileVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MdsFileVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
