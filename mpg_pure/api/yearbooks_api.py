# coding: utf-8

"""
    PubMan REST API

    This is an automatically generated REST API client for PubMan.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mpg_pure.api_client import ApiClient


class YearbooksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_using_post4(self, authorization, yearbook, **kwargs):  # noqa: E501
        """create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_using_post4(authorization, yearbook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param YearbookDbVO yearbook: yearbook (required)
        :return: YearbookDbVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_using_post4_with_http_info(authorization, yearbook, **kwargs)  # noqa: E501
        else:
            (data) = self.create_using_post4_with_http_info(authorization, yearbook, **kwargs)  # noqa: E501
            return data

    def create_using_post4_with_http_info(self, authorization, yearbook, **kwargs):  # noqa: E501
        """create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_using_post4_with_http_info(authorization, yearbook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param YearbookDbVO yearbook: yearbook (required)
        :return: YearbookDbVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'yearbook']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_using_post4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_using_post4`")  # noqa: E501
        # verify the required parameter 'yearbook' is set
        if ('yearbook' not in params or
                params['yearbook'] is None):
            raise ValueError("Missing the required parameter `yearbook` when calling `create_using_post4`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'yearbook' in params:
            body_params = params['yearbook']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/yearbooks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='YearbookDbVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_using_delete4(self, authorization, yearbook_id, **kwargs):  # noqa: E501
        """delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_using_delete4(authorization, yearbook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str yearbook_id: yearbookId (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_using_delete4_with_http_info(authorization, yearbook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_using_delete4_with_http_info(authorization, yearbook_id, **kwargs)  # noqa: E501
            return data

    def delete_using_delete4_with_http_info(self, authorization, yearbook_id, **kwargs):  # noqa: E501
        """delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_using_delete4_with_http_info(authorization, yearbook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str yearbook_id: yearbookId (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'yearbook_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_using_delete4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_using_delete4`")  # noqa: E501
        # verify the required parameter 'yearbook_id' is set
        if ('yearbook_id' not in params or
                params['yearbook_id'] is None):
            raise ValueError("Missing the required parameter `yearbook_id` when calling `delete_using_delete4`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'yearbook_id' in params:
            path_params['yearbookId'] = params['yearbook_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/yearbooks/{yearbookId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_using_get3(self, **kwargs):  # noqa: E501
        """getAll  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_using_get3(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization
        :param int _from: from
        :param int size: size
        :return: SearchRetrieveResponseVOYearbookDbVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_using_get3_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_using_get3_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_using_get3_with_http_info(self, **kwargs):  # noqa: E501
        """getAll  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_using_get3_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization
        :param int _from: from
        :param int size: size
        :return: SearchRetrieveResponseVOYearbookDbVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', '_from', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_using_get3" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/yearbooks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchRetrieveResponseVOYearbookDbVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_items_using_get(self, yearbook_id, **kwargs):  # noqa: E501
        """getItems  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_items_using_get(yearbook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str yearbook_id: yearbookId (required)
        :param str authorization: Authorization
        :param str citation: citation
        :param str csl_cone_id: cslConeId
        :param str format: format
        :return: SearchRetrieveResponseVOItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_items_using_get_with_http_info(yearbook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_items_using_get_with_http_info(yearbook_id, **kwargs)  # noqa: E501
            return data

    def get_items_using_get_with_http_info(self, yearbook_id, **kwargs):  # noqa: E501
        """getItems  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_items_using_get_with_http_info(yearbook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str yearbook_id: yearbookId (required)
        :param str authorization: Authorization
        :param str citation: citation
        :param str csl_cone_id: cslConeId
        :param str format: format
        :return: SearchRetrieveResponseVOItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['yearbook_id', 'authorization', 'citation', 'csl_cone_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_items_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'yearbook_id' is set
        if ('yearbook_id' not in params or
                params['yearbook_id'] is None):
            raise ValueError("Missing the required parameter `yearbook_id` when calling `get_items_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'yearbook_id' in params:
            path_params['yearbookId'] = params['yearbook_id']  # noqa: E501

        query_params = []
        if 'citation' in params:
            query_params.append(('citation', params['citation']))  # noqa: E501
        if 'csl_cone_id' in params:
            query_params.append(('cslConeId', params['csl_cone_id']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/yearbooks/{yearbookId}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchRetrieveResponseVOItemVersionVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_using_get4(self, yearbook_id, **kwargs):  # noqa: E501
        """get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_using_get4(yearbook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str yearbook_id: yearbookId (required)
        :param str authorization: Authorization
        :return: YearbookDbVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_using_get4_with_http_info(yearbook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_using_get4_with_http_info(yearbook_id, **kwargs)  # noqa: E501
            return data

    def get_using_get4_with_http_info(self, yearbook_id, **kwargs):  # noqa: E501
        """get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_using_get4_with_http_info(yearbook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str yearbook_id: yearbookId (required)
        :param str authorization: Authorization
        :return: YearbookDbVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['yearbook_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_using_get4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'yearbook_id' is set
        if ('yearbook_id' not in params or
                params['yearbook_id'] is None):
            raise ValueError("Missing the required parameter `yearbook_id` when calling `get_using_get4`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'yearbook_id' in params:
            path_params['yearbookId'] = params['yearbook_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/yearbooks/{yearbookId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='YearbookDbVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_using_post2(self, query, **kwargs):  # noqa: E501
        """query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_using_post2(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JsonNode query: query (required)
        :param str authorization: Authorization
        :return: SearchRetrieveResponseVOYearbookDbVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_using_post2_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.query_using_post2_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def query_using_post2_with_http_info(self, query, **kwargs):  # noqa: E501
        """query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_using_post2_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JsonNode query: query (required)
        :param str authorization: Authorization
        :return: SearchRetrieveResponseVOYearbookDbVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_using_post2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `query_using_post2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query' in params:
            body_params = params['query']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/yearbooks/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchRetrieveResponseVOYearbookDbVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_using_put4(self, authorization, yearbook, yearbook_id, **kwargs):  # noqa: E501
        """update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_using_put4(authorization, yearbook, yearbook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param YearbookDbVO yearbook: yearbook (required)
        :param str yearbook_id: yearbookId (required)
        :return: YearbookDbVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_using_put4_with_http_info(authorization, yearbook, yearbook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_using_put4_with_http_info(authorization, yearbook, yearbook_id, **kwargs)  # noqa: E501
            return data

    def update_using_put4_with_http_info(self, authorization, yearbook, yearbook_id, **kwargs):  # noqa: E501
        """update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_using_put4_with_http_info(authorization, yearbook, yearbook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param YearbookDbVO yearbook: yearbook (required)
        :param str yearbook_id: yearbookId (required)
        :return: YearbookDbVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'yearbook', 'yearbook_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_using_put4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_using_put4`")  # noqa: E501
        # verify the required parameter 'yearbook' is set
        if ('yearbook' not in params or
                params['yearbook'] is None):
            raise ValueError("Missing the required parameter `yearbook` when calling `update_using_put4`")  # noqa: E501
        # verify the required parameter 'yearbook_id' is set
        if ('yearbook_id' not in params or
                params['yearbook_id'] is None):
            raise ValueError("Missing the required parameter `yearbook_id` when calling `update_using_put4`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'yearbook_id' in params:
            path_params['yearbookId'] = params['yearbook_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'yearbook' in params:
            body_params = params['yearbook']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/yearbooks/{yearbookId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='YearbookDbVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
