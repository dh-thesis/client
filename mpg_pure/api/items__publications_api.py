# coding: utf-8

"""
    PubMan REST API

    This is an automatically generated REST API client for PubMan.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mpg_pure.api_client import ApiClient


class ItemsPublicationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_using_post1(self, authorization, item, **kwargs):  # noqa: E501
        """create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_using_post1(authorization, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param ItemVersionVO item: item (required)
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_using_post1_with_http_info(authorization, item, **kwargs)  # noqa: E501
        else:
            (data) = self.create_using_post1_with_http_info(authorization, item, **kwargs)  # noqa: E501
            return data

    def create_using_post1_with_http_info(self, authorization, item, **kwargs):  # noqa: E501
        """create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_using_post1_with_http_info(authorization, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param ItemVersionVO item: item (required)
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_using_post1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_using_post1`")  # noqa: E501
        # verify the required parameter 'item' is set
        if ('item' not in params or
                params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `create_using_post1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemVersionVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_using_delete1(self, authorization, item_id, params, **kwargs):  # noqa: E501
        """delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_using_delete1(authorization, item_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str item_id: itemId (required)
        :param TaskParamVO params: params (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_using_delete1_with_http_info(authorization, item_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_using_delete1_with_http_info(authorization, item_id, params, **kwargs)  # noqa: E501
            return data

    def delete_using_delete1_with_http_info(self, authorization, item_id, params, **kwargs):  # noqa: E501
        """delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_using_delete1_with_http_info(authorization, item_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str item_id: itemId (required)
        :param TaskParamVO params: params (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'item_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_using_delete1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_using_delete1`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `delete_using_delete1`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in params or
                params['params'] is None):
            raise ValueError("Missing the required parameter `params` when calling `delete_using_delete1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in params:
            body_params = params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/items/{itemId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_component_content_using_get(self, component_id, item_id, **kwargs):  # noqa: E501
        """getComponentContent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_content_using_get(component_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: componentId (required)
        :param str item_id: itemId (required)
        :param str authorization: Authorization
        :param bool download: download
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_component_content_using_get_with_http_info(component_id, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_component_content_using_get_with_http_info(component_id, item_id, **kwargs)  # noqa: E501
            return data

    def get_component_content_using_get_with_http_info(self, component_id, item_id, **kwargs):  # noqa: E501
        """getComponentContent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_content_using_get_with_http_info(component_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: componentId (required)
        :param str item_id: itemId (required)
        :param str authorization: Authorization
        :param bool download: download
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id', 'item_id', 'authorization', 'download']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_content_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if ('component_id' not in params or
                params['component_id'] is None):
            raise ValueError("Missing the required parameter `component_id` when calling `get_component_content_using_get`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_component_content_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []
        if 'download' in params:
            query_params.append(('download', params['download']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/items/{itemId}/component/{componentId}/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_technical_metadata_by_tika_using_get(self, component_id, item_id, **kwargs):  # noqa: E501
        """getTechnicalMetadataByTika  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_technical_metadata_by_tika_using_get(component_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: componentId (required)
        :param str item_id: itemId (required)
        :param str authorization: Authorization
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_technical_metadata_by_tika_using_get_with_http_info(component_id, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_technical_metadata_by_tika_using_get_with_http_info(component_id, item_id, **kwargs)  # noqa: E501
            return data

    def get_technical_metadata_by_tika_using_get_with_http_info(self, component_id, item_id, **kwargs):  # noqa: E501
        """getTechnicalMetadataByTika  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_technical_metadata_by_tika_using_get_with_http_info(component_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_id: componentId (required)
        :param str item_id: itemId (required)
        :param str authorization: Authorization
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_id', 'item_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_technical_metadata_by_tika_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if ('component_id' not in params or
                params['component_id'] is None):
            raise ValueError("Missing the required parameter `component_id` when calling `get_technical_metadata_by_tika_using_get`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_technical_metadata_by_tika_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']  # noqa: E501
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/items/{itemId}/component/{componentId}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_using_get1(self, item_id, **kwargs):  # noqa: E501
        """get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_using_get1(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: itemId (required)
        :param str authorization: Authorization
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_using_get1_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_using_get1_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_using_get1_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_using_get1_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: itemId (required)
        :param str authorization: Authorization
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/items/{itemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemVersionVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_version_history_using_get(self, authorization, item_id, **kwargs):  # noqa: E501
        """getVersionHistory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_version_history_using_get(authorization, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str item_id: itemId (required)
        :return: list[AuditDbVO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_version_history_using_get_with_http_info(authorization, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_version_history_using_get_with_http_info(authorization, item_id, **kwargs)  # noqa: E501
            return data

    def get_version_history_using_get_with_http_info(self, authorization, item_id, **kwargs):  # noqa: E501
        """getVersionHistory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_version_history_using_get_with_http_info(authorization, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str item_id: itemId (required)
        :return: list[AuditDbVO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_version_history_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_version_history_using_get`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_version_history_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/items/{itemId}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuditDbVO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_using_put(self, authorization, item_id, params, **kwargs):  # noqa: E501
        """release  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_using_put(authorization, item_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str item_id: itemId (required)
        :param TaskParamVO params: params (required)
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_using_put_with_http_info(authorization, item_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.release_using_put_with_http_info(authorization, item_id, params, **kwargs)  # noqa: E501
            return data

    def release_using_put_with_http_info(self, authorization, item_id, params, **kwargs):  # noqa: E501
        """release  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_using_put_with_http_info(authorization, item_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str item_id: itemId (required)
        :param TaskParamVO params: params (required)
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'item_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `release_using_put`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `release_using_put`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in params or
                params['params'] is None):
            raise ValueError("Missing the required parameter `params` when calling `release_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in params:
            body_params = params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/items/{itemId}/release', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemVersionVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revise_using_put(self, authorization, item_id, params, **kwargs):  # noqa: E501
        """revise  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revise_using_put(authorization, item_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str item_id: itemId (required)
        :param TaskParamVO params: params (required)
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revise_using_put_with_http_info(authorization, item_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.revise_using_put_with_http_info(authorization, item_id, params, **kwargs)  # noqa: E501
            return data

    def revise_using_put_with_http_info(self, authorization, item_id, params, **kwargs):  # noqa: E501
        """revise  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revise_using_put_with_http_info(authorization, item_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str item_id: itemId (required)
        :param TaskParamVO params: params (required)
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'item_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revise_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `revise_using_put`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `revise_using_put`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in params or
                params['params'] is None):
            raise ValueError("Missing the required parameter `params` when calling `revise_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in params:
            body_params = params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/items/{itemId}/revise', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemVersionVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_scroll_using_get(self, scroll_id, **kwargs):  # noqa: E501
        """searchScroll  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_scroll_using_get(scroll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scroll_id: scrollId (required)
        :param str authorization: Authorization
        :param str citation: citation
        :param str csl_cone_id: cslConeId
        :param str format: format
        :return: SearchRetrieveResponseVOItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_scroll_using_get_with_http_info(scroll_id, **kwargs)  # noqa: E501
        else:
            (data) = self.search_scroll_using_get_with_http_info(scroll_id, **kwargs)  # noqa: E501
            return data

    def search_scroll_using_get_with_http_info(self, scroll_id, **kwargs):  # noqa: E501
        """searchScroll  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_scroll_using_get_with_http_info(scroll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scroll_id: scrollId (required)
        :param str authorization: Authorization
        :param str citation: citation
        :param str csl_cone_id: cslConeId
        :param str format: format
        :return: SearchRetrieveResponseVOItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scroll_id', 'authorization', 'citation', 'csl_cone_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_scroll_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scroll_id' is set
        if ('scroll_id' not in params or
                params['scroll_id'] is None):
            raise ValueError("Missing the required parameter `scroll_id` when calling `search_scroll_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'citation' in params:
            query_params.append(('citation', params['citation']))  # noqa: E501
        if 'csl_cone_id' in params:
            query_params.append(('cslConeId', params['csl_cone_id']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'scroll_id' in params:
            query_params.append(('scrollId', params['scroll_id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/items/search/scroll', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchRetrieveResponseVOItemVersionVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_using_post(self, query, **kwargs):  # noqa: E501
        """search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_using_post(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JsonNode query: query (required)
        :param str authorization: Authorization
        :param str citation: citation
        :param str csl_cone_id: cslConeId
        :param str format: format
        :param bool scroll: scroll
        :return: SearchRetrieveResponseVOItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_using_post_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.search_using_post_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def search_using_post_with_http_info(self, query, **kwargs):  # noqa: E501
        """search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_using_post_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JsonNode query: query (required)
        :param str authorization: Authorization
        :param str citation: citation
        :param str csl_cone_id: cslConeId
        :param str format: format
        :param bool scroll: scroll
        :return: SearchRetrieveResponseVOItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'authorization', 'citation', 'csl_cone_id', 'format', 'scroll']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `search_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'citation' in params:
            query_params.append(('citation', params['citation']))  # noqa: E501
        if 'csl_cone_id' in params:
            query_params.append(('cslConeId', params['csl_cone_id']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'scroll' in params:
            query_params.append(('scroll', params['scroll']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query' in params:
            body_params = params['query']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/items/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchRetrieveResponseVOItemVersionVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_using_put(self, authorization, item_id, params, **kwargs):  # noqa: E501
        """submit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_using_put(authorization, item_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str item_id: itemId (required)
        :param TaskParamVO params: params (required)
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_using_put_with_http_info(authorization, item_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_using_put_with_http_info(authorization, item_id, params, **kwargs)  # noqa: E501
            return data

    def submit_using_put_with_http_info(self, authorization, item_id, params, **kwargs):  # noqa: E501
        """submit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_using_put_with_http_info(authorization, item_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str item_id: itemId (required)
        :param TaskParamVO params: params (required)
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'item_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `submit_using_put`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `submit_using_put`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in params or
                params['params'] is None):
            raise ValueError("Missing the required parameter `params` when calling `submit_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in params:
            body_params = params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/items/{itemId}/submit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemVersionVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_using_put1(self, authorization, item, item_id, **kwargs):  # noqa: E501
        """update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_using_put1(authorization, item, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param ItemVersionVO item: item (required)
        :param str item_id: itemId (required)
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_using_put1_with_http_info(authorization, item, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_using_put1_with_http_info(authorization, item, item_id, **kwargs)  # noqa: E501
            return data

    def update_using_put1_with_http_info(self, authorization, item, item_id, **kwargs):  # noqa: E501
        """update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_using_put1_with_http_info(authorization, item, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param ItemVersionVO item: item (required)
        :param str item_id: itemId (required)
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'item', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_using_put1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_using_put1`")  # noqa: E501
        # verify the required parameter 'item' is set
        if ('item' not in params or
                params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `update_using_put1`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `update_using_put1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/items/{itemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemVersionVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def withdraw_using_put(self, authorization, item_id, params, **kwargs):  # noqa: E501
        """withdraw  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.withdraw_using_put(authorization, item_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str item_id: itemId (required)
        :param TaskParamVO params: params (required)
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.withdraw_using_put_with_http_info(authorization, item_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.withdraw_using_put_with_http_info(authorization, item_id, params, **kwargs)  # noqa: E501
            return data

    def withdraw_using_put_with_http_info(self, authorization, item_id, params, **kwargs):  # noqa: E501
        """withdraw  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.withdraw_using_put_with_http_info(authorization, item_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (required)
        :param str item_id: itemId (required)
        :param TaskParamVO params: params (required)
        :return: ItemVersionVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'item_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method withdraw_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `withdraw_using_put`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `withdraw_using_put`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in params or
                params['params'] is None):
            raise ValueError("Missing the required parameter `params` when calling `withdraw_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in params:
            body_params = params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/items/{itemId}/withdraw', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemVersionVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
